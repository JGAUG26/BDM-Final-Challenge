# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lofk-EWZDA5XuVUyguxKRB6qgresnf3B
"""

# Commented out IPython magic to ensure Python compatibility.
import csv
import json
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import IPython
# %matplotlib inline
IPython.display.set_matplotlib_formats('svg')
pd.plotting.register_matplotlib_converters()
sns.set_style("whitegrid")

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql import types as T
sc = pyspark.SparkContext.getOrCreate()
spark = SparkSession(sc)

#Filter ID function
def FilterID(partId, part):
    for record in csv.reader(part):
        if record[0] in PlaceDict.keys():
            yield record[0],record[12],record[13],record[18],record[19]

#Create a year-month column for filter
def AddYM(partId, part):
    for i in part:
        startyear = i[1].split('-')[0]
        startmonth = i[1].split('-')[1]
        endyear = i[2].split('-')[0]
        endmonth = i[2].split('-')[1]
        yield i[0],i[3],i[4],startyear+startmonth,endyear+endmonth

#Step2: Filter by date 
def DateFilter(partId, part):
    for i in part:
        if i[4] in yearList:
            yield i
        elif i[3] in yearList:
            yield i

def FilterCBG(partId, part):
    for i in part:
        #counter = 0
        res = json.loads(i[2])
        check = list(res.keys())
        for key in check:
            if  key not in v_cbgs.keys():
                del res[key]
        #if counter == len(check):
        yield i[1],res,i[3],i[4]

def FilterMar9(partId, part):
    for i in part:
        start = i[2]
        end = i[3]

        if start == '201903' or end == '201903':

          cbg_s = i[0]
          sdict = i[1]
          vkey = list(sdict.keys())
          for j in range (0,len(vkey)):
              cbg = vkey[j]
              num = sdict[cbg]
              x2 = PointDict[cbg_s][0]
              y2 = PointDict[cbg_s][1]
              x1 = PointDict[cbg][0]
              y1 = PointDict[cbg][1]
              Distance = Point(x1, y1).distance(Point((x2, y2)))/5280
              yield cbg,Distance,num

def FilterOct9(partId, part):
    for i in part:
        start = i[2]
        end = i[3]

        if start == '201910' or end == '201910':

          cbg_s = i[0]
          sdict = i[1]
          vkey = list(sdict.keys())
          for j in range (0,len(vkey)):
              cbg = vkey[j]
              num = sdict[cbg]
              x2 = PointDict[cbg_s][0]
              y2 = PointDict[cbg_s][1]
              x1 = PointDict[cbg][0]
              y1 = PointDict[cbg][1]
              Distance = Point(x1, y1).distance(Point((x2, y2)))/5280
              yield cbg,Distance,num

def FilterMar0(partId, part):
    for i in part:
        start = i[2]
        end = i[3]

        if start == '202003' or end == '202003':

          cbg_s = i[0]
          sdict = i[1]
          vkey = list(sdict.keys())
          for j in range (0,len(vkey)):
              cbg = vkey[j]
              num = sdict[cbg]
              x2 = PointDict[cbg_s][0]
              y2 = PointDict[cbg_s][1]
              x1 = PointDict[cbg][0]
              y1 = PointDict[cbg][1]
              Distance = Point(x1, y1).distance(Point((x2, y2)))/5280
              yield cbg,Distance,num

def FilterOct0(partId, part):
    for i in part:
        start = i[2]
        end = i[3]

        if start == '202010' or end == '202010':

          cbg_s = i[0]
          sdict = i[1]
          vkey = list(sdict.keys())
          for j in range (0,len(vkey)):
              cbg = vkey[j]
              num = sdict[cbg]
              x2 = PointDict[cbg_s][0]
              y2 = PointDict[cbg_s][1]
              x1 = PointDict[cbg][0]
              y1 = PointDict[cbg][1]
              Distance = Point(x1, y1).distance(Point((x2, y2)))/5280
              yield cbg,Distance,num

if __name__=='__main__':
  weekdata = sc.textFile('weekly-patterns-nyc-2019-2020-sample.csv', use_unicode=True).cache()
  df_store = pd.read_csv('nyc_supermarkets.csv')
  PlaceDict = dict(zip(df_store['safegraph_placekey'], df_store['name']))
  result = weekdata.mapPartitionsWithIndex(FilterID)
  result2 = result.mapPartitionsWithIndex(AddYM)
  yearList = ['201903','201910','202003','202010']
  result3 = result2.mapPartitionsWithIndex(DateFilter)
  Centroids = pd.read_csv('nyc_cbg_centroids.csv')
  Centroids['cbg_fips'] = Centroids['cbg_fips'].astype(str)
  v_cbgs = dict(zip(Centroids['cbg_fips'], Centroids['longitude']))
  result4 = result3.mapPartitionsWithIndex(FilterCBG)
  pointdata = t.transform(40.79841838544442,-73.88878737683943)
  lst = []
  t = Transformer.from_crs(4326, 2263)
  for s in range(0,len(Centroids['cbg_fips'])):
    lat = Centroids['latitude'][s]
    lon = Centroids['longitude'][s]
    pointdata = t.transform(lat,lon)
    lst.append(pointdata)
  Centroids['Point'] = lst
  PointDict = dict(zip(Centroids['cbg_fips'], Centroids['Point']))
  result_Mar9 = result4.mapPartitionsWithIndex(FilterMar9)
  result_Oct9 = result4.mapPartitionsWithIndex(FilterOct9)
  result_Mar0 = result4.mapPartitionsWithIndex(FilterMar0)
  result_Oct0 = result4.mapPartitionsWithIndex(FilterOct0)
  deptColumns_903 = ["cbg_fips","distance","number of people"]
  df903 = result_Mar9.toDF(deptColumns_903)
  df1 = df903.toPandas()
  df_m1 = df1.groupby(by='cbg_fips').agg({'distance':'sum','number of people':'sum'}).reset_index()
  df_m1['2019-03'] = df_m1['distance'] / df_m1['number of people']
  df_m1 = df_m1[['cbg_fips','2019-03']]
  deptColumns_910 = ["cbg_fips","distance","number of people"]
  df910 = result_Oct9.toDF(deptColumns_910)
  df2 = df910.toPandas()
  df_m2 = df2.groupby(by='cbg_fips').agg({'distance':'sum','number of people':'sum'}).reset_index()
  df_m2['2019-10'] = df_m2['distance'] / df_m2['number of people']
  df_m2 = df_m2[['cbg_fips','2019-10']]
  deptColumns_003 = ["cbg_fips","distance","number of people"]
  df003 = result_Mar0.toDF(deptColumns_003)
  df3 = df003.toPandas()
  df_m3 = df3.groupby(by='cbg_fips').agg({'distance':'sum','number of people':'sum'}).reset_index()
  df_m3['2020-03'] = df_m3['distance'] / df_m3['number of people']
  df_m3 = df_m3[['cbg_fips','2020-03']]
  deptColumns_010 = ["cbg_fips","distance","number of people"]
  df010 = result_Oct0.toDF(deptColumns_010)
  df4 = df010.toPandas()
  df_m4 = df4.groupby(by='cbg_fips').agg({'distance':'sum','number of people':'sum'}).reset_index()
  df_m4['2020-10'] = df_m4['distance'] / df_m4['number of people']
  df_m4 = df_m4[['cbg_fips','2020-10']]
  df_t = pd.concat([df_m1,df_m2,df_m3,df_m4], axis=0)
  df_m = df_t.groupby(by='cbg_fips').agg({'2019-03':'mean','2019-10':'mean','2020-03':'mean','2020-10':'mean'}).reset_index().fillna(value='')
  df_m.to_csv('Final Output.csv')